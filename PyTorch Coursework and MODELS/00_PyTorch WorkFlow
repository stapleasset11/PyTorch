{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOVq0UIeyVHjR6Vwh3j7JyU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XbccSsfotUMK","executionInfo":{"status":"ok","timestamp":1719718195771,"user_tz":-180,"elapsed":4491,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"9a909bb5-316a-46d3-a024-d3368f4a21ff"},"outputs":[{"output_type":"stream","name":"stdout","text":["hello world\n"]}],"source":["print(\"hello world\")"]},{"cell_type":"code","source":["import torch\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","print(torch.__version__)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lnkHNB-AxCDU","executionInfo":{"status":"ok","timestamp":1719718198097,"user_tz":-180,"elapsed":46,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"e0191f93-3ca7-4159-a891-ebdee3cfd265"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.3.0+cu121\n"]}]},{"cell_type":"markdown","source":["##Introduction to Tensors\n","##Creating Tensors\n","\n","pytorch tensors are created using 'torch.tensor' = https://pytorch.org/docs/stable/torch.html#tensors\n","\n"],"metadata":{"id":"IMPsP-ScOqku"}},{"cell_type":"code","source":["##Scalar\n","scalar = torch.tensor(8)\n","scalar"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y05aw56lOtxu","executionInfo":{"status":"ok","timestamp":1719718198097,"user_tz":-180,"elapsed":42,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"48c4f2da-3532-4234-9cab-19c2b34e9425"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(8)"]},"metadata":{},"execution_count":3}]},{"cell_type":"code","source":["scalar.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eNys3QeMV__B","executionInfo":{"status":"ok","timestamp":1719718198098,"user_tz":-180,"elapsed":37,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"aaa31008-db9b-4d7f-d28a-d705d9810898"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#Get tensor back as python int\n","scalar.item()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Md8MLe5sWBy9","executionInfo":{"status":"ok","timestamp":1719718198098,"user_tz":-180,"elapsed":34,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"76761248-eb36-4f38-d922-7303d72f77f8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["8"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["#Vector\n","vector = torch.tensor([7,7])\n","vector"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4AxC643EWJJr","executionInfo":{"status":"ok","timestamp":1719718198098,"user_tz":-180,"elapsed":30,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"89d6146f-e2f6-4694-9e92-da7c64d320c6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([7, 7])"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":[" #MATRIX\n","MATRIX = torch.tensor([[7,8],\n","                        [9,10]])\n","MATRIX"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FxXuecXPWR6Z","executionInfo":{"status":"ok","timestamp":1719718198098,"user_tz":-180,"elapsed":26,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"7a5806d0-1888-4d3c-e6ac-e01fc7447192"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[ 7,  8],\n","        [ 9, 10]])"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["MATRIX.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Nvfkb3twl0S2","executionInfo":{"status":"ok","timestamp":1719718198099,"user_tz":-180,"elapsed":23,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"23c1be3e-c169-4f9b-cbf1-2fd9beaa070e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["MATRIX[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EwXCYSYJmIUN","executionInfo":{"status":"ok","timestamp":1719718198099,"user_tz":-180,"elapsed":20,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"72bff083-0544-40d6-9e68-2cd4d007d374"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([7, 8])"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["#TENSOR\n","TENSOR = torch.tensor([[[1,2,3,43],[4,5,6,66],[10,11,12,99],[13,14,15,88]],[[1,2,3,43],[4,5,6,66],[10,11,12,99],[13,14,15,88]],[[1,2,3,43],[4,5,6,66],[10,11,12,99],[13,14,15,88]]])\n","TENSOR"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s1RpH10qmM0t","executionInfo":{"status":"ok","timestamp":1719718198099,"user_tz":-180,"elapsed":18,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"b7d22b72-2fdc-4860-a6eb-4b94e8ecfb0d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[[ 1,  2,  3, 43],\n","         [ 4,  5,  6, 66],\n","         [10, 11, 12, 99],\n","         [13, 14, 15, 88]],\n","\n","        [[ 1,  2,  3, 43],\n","         [ 4,  5,  6, 66],\n","         [10, 11, 12, 99],\n","         [13, 14, 15, 88]],\n","\n","        [[ 1,  2,  3, 43],\n","         [ 4,  5,  6, 66],\n","         [10, 11, 12, 99],\n","         [13, 14, 15, 88]]])"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["TENSOR.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p684TnyOoY0g","executionInfo":{"status":"ok","timestamp":1719718198100,"user_tz":-180,"elapsed":15,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"d14f60b8-2de5-4e8e-dbc5-8c72fafb2a23"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["TENSOR.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RtPURpn9of_w","executionInfo":{"status":"ok","timestamp":1719718198100,"user_tz":-180,"elapsed":10,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"d7b1a0b2-07fd-4494-945c-21527e5818b2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([3, 4, 4])"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["##Random Tensors"],"metadata":{"id":"hvmpwnZL6dbu"}},{"cell_type":"markdown","source":["##Random Tensors\n","\n","Why Rndom Tensors?\n","\n","Random  tensors are important because the way many neural networks learn is that they start with tensors full of random numbers and then adjust those random numbers to better represent the data.\n","\n","`start with random numbers -> look at data -> update random numbers -> look at data -> update random numbers -> look at data`"],"metadata":{"id":"EV45iEnbxT1u"}},{"cell_type":"code","source":["#Crerate a random tensor of size(3,4)\n","\n","random_tensor = torch.rand(4,4)\n","random_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m8txy-xe6iBs","executionInfo":{"status":"ok","timestamp":1719718200238,"user_tz":-180,"elapsed":69,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"d216d2e9-b429-4fc4-92b8-4b64b8515b6d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.8490, 0.3668, 0.6883, 0.6642],\n","        [0.8902, 0.2130, 0.9762, 0.6175],\n","        [0.1818, 0.1792, 0.5092, 0.8942],\n","        [0.5743, 0.2757, 0.2265, 0.4026]])"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["#Create a random tensor with similar shape to an image tensor\n","\n","random_image_size_tensor = torch.rand(size=(3,224,224))\n","random_image_size_tensor.shape,random_image_size_tensor.ndim"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7OZda_Ndz6wi","executionInfo":{"status":"ok","timestamp":1719718200239,"user_tz":-180,"elapsed":65,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"18c8a5bd-e343-4874-fd06-4bc295a92ff9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([3, 224, 224]), 3)"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["##Zeros and Ones"],"metadata":{"id":"z8R75R309grB"}},{"cell_type":"code","source":["#Create a tensor of all zeros\n","zeros = torch.zeros(size=(4,4))\n","zeros"],"metadata":{"id":"7N1c7Muv66rv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719718200239,"user_tz":-180,"elapsed":61,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"f9638631-871f-413a-f34a-658023099909"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0., 0., 0., 0.],\n","        [0., 0., 0., 0.],\n","        [0., 0., 0., 0.],\n","        [0., 0., 0., 0.]])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["#Create a tensor of all ones\n","ones = torch.ones(size=(4,4))\n","ones"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HYv50f999xhE","executionInfo":{"status":"ok","timestamp":1719718200239,"user_tz":-180,"elapsed":55,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"e1d6b9af-c201-4df8-f091-7d1e8755b637"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.],\n","        [1., 1., 1., 1.]])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["ones.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FhY4mTDa_z4W","executionInfo":{"status":"ok","timestamp":1719718200239,"user_tz":-180,"elapsed":50,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"0f3d7e29-ad12-417a-eea5-c27ab5c80482"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.float32"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["##Creating a range of tensors and tensors-like"],"metadata":{"id":"_s2mhBuEAhJx"}},{"cell_type":"code","source":["#Using torch.range()\n","one_ten = torch.arange(start=1,end=11,step=1)\n","one_ten"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NEGCnrAN_3TT","executionInfo":{"status":"ok","timestamp":1719718200240,"user_tz":-180,"elapsed":47,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"7a62c7a2-06f0-4065-bde3-1fbb2fff8fee"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["#Create Tensors like\n","ten_zeros = torch.zeros_like(input=one_ten)\n","ten_zeros"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H1SscBILAuLA","executionInfo":{"status":"ok","timestamp":1719718200240,"user_tz":-180,"elapsed":44,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"e5218072-743e-4da1-dbaa-5396d980f494"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["###Tensor datatypes\n","**Note** Tensor datatypes is one of the three big issues with pytorch & deep learning.\n","\n","###1.Tensors not right datatype\n","###2.Tensors not right shape\n","###3.Tensors not on right device\n","\n","\n","##Precision computing: `https://en.wikipedia.org/wiki/Precision_(computer_science)`"],"metadata":{"id":"54O9RBKdDPPW"}},{"cell_type":"code","source":["#Float 32 tensor\n","float_32_tensor = torch.tensor([3.0,6.0,9.0],\n","                               dtype=None,#What datatype is the tensor (eg. float32,float16,float64)\n","                               device=None,#Waht device is your tensor on\n","                               requires_grad=False)#whether or not to track gradient\n","float_32_tensor"],"metadata":{"id":"HcUNYWtQPW6h","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719718200240,"user_tz":-180,"elapsed":41,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"8c1c905c-3131-4e95-89d6-1148f0f84508"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([3., 6., 9.])"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["float_32_tensor.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3TyIKi66yEt3","executionInfo":{"status":"ok","timestamp":1719718200241,"user_tz":-180,"elapsed":38,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"7991a91d-149f-40f5-bfa6-cd9e2b439bfc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.float32"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["int_32_tensor = torch.tensor([3,16,99],dtype=torch.int64)\n","int_32_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NKb7B-3Tyzd5","executionInfo":{"status":"ok","timestamp":1719718200241,"user_tz":-180,"elapsed":34,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"4b161a5e-5760-4dc6-ea18-268d17932146"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([ 3, 16, 99])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["int_32_tensor * float_32_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JfO7bXKQQW1B","executionInfo":{"status":"ok","timestamp":1719718200242,"user_tz":-180,"elapsed":32,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"f1d0bcad-baec-402c-c624-57802a0307a9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([  9.,  96., 891.])"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["##Tensor attributes\n","### 1.Tensors not right datatype - To get datatype from a tensor we use `tensor.dtype`\n","#### 2.Tensors not right shape - To get shape of a tensor we use `tensor.shape`\n","#### 3.Tensors not on right device - To get device from a tensor we use `tensor.device`"],"metadata":{"id":"MI90nXelS_00"}},{"cell_type":"code","source":["#Create a tensor\n","some_tensor = torch.rand(3,4)\n","some_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2W7YkBoObZvr","executionInfo":{"status":"ok","timestamp":1719718200242,"user_tz":-180,"elapsed":30,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"28a9297b-2a41-4a6f-bf59-f5beeb94836c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[0.6914, 0.8678, 0.2764, 0.5993],\n","        [0.7315, 0.7817, 0.0367, 0.4952],\n","        [0.1512, 0.1467, 0.0934, 0.9164]])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#Find out some details about some tensor\n","print(some_tensor)\n","print(f\"Datatype of tensor: {some_tensor.dtype}\")\n","print(f\"Shape of the tensor: {some_tensor.shape}\")\n","print(f\"Device tensor is on: {some_tensor.device}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QLorsJpubl8Y","executionInfo":{"status":"ok","timestamp":1719718200242,"user_tz":-180,"elapsed":27,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"7ea1779c-1d6b-4d61-d7c6-5b32f2667fb8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.6914, 0.8678, 0.2764, 0.5993],\n","        [0.7315, 0.7817, 0.0367, 0.4952],\n","        [0.1512, 0.1467, 0.0934, 0.9164]])\n","Datatype of tensor: torch.float32\n","Shape of the tensor: torch.Size([3, 4])\n","Device tensor is on: cpu\n"]}]},{"cell_type":"markdown","source":["#Manipulating tensors (tensor operations)\n","In deep learning, data (images, text, video, audio, protein structures, etc) gets represented as tensors.\n","\n","A model learns by investigating those tensors and performing a series of operations (could be 1,000,000s+) on tensors to create a representation of the patterns in the input data.\n","\n","These operations are often a wonderful dance between:\n","\n","* Addition\n","* Substraction\n","* Multiplication (element-wise)\n","* Division\n","* Matrix multiplication"],"metadata":{"id":"Yf2_3xYSYMuv"}},{"cell_type":"code","source":["#Create a tensor add 10\n","tensor = torch.tensor([1,2,3])\n","tensor + 10\n"],"metadata":{"id":"buRlYJUubuIO","executionInfo":{"status":"ok","timestamp":1719718200242,"user_tz":-180,"elapsed":23,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"951c3154-0c18-4507-fad5-3fa5261c96c2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([11, 12, 13])"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Multiply tensor by 10\n","tensor *10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ktpeKP_nZK64","executionInfo":{"status":"ok","timestamp":1719718200242,"user_tz":-180,"elapsed":19,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"d0b498ef-032b-4634-8862-6f95bc9984d1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([10, 20, 30])"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Subtract tensor by 10\n","tensor - 10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ebMFhP1qaDU-","executionInfo":{"status":"ok","timestamp":1719718200243,"user_tz":-180,"elapsed":17,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"89e26830-fd45-4846-9609-f10c98b1800b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([-9, -8, -7])"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["#Tryout pytorch inbuilt functions\n","torch.add(tensor,10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vZ91ZACQbGVV","executionInfo":{"status":"ok","timestamp":1719718200243,"user_tz":-180,"elapsed":15,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"750da853-0698-4ae1-b878-da97887e2e03"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([11, 12, 13])"]},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["###Matrix Multiplication.\n","There are two main ways of performing multiplication in neural networks and deep learning.\n","* Element-wise multiplication\n","* Matrix Multiplication.\n","\n","\n","Two main rules when performing matrix multiplication.\n","1. The inner dimensions must match.i.e\n","* (3,2) @ (3,2) won't work.\n","* (2,3,) @ (3,2) will work.\n","* (3,2) @ (2,3) will work.\n","\n","2.The resulting matrix has the shape of the **outer dimension**\n","* (2,3) @ (3,2) -> `(2,2)`"],"metadata":{"id":"B5RIBU97cK5C"}},{"cell_type":"code","source":["#Element-wise Multiplication.\n","print(tensor ,\"*\", tensor)\n","print(f\"Equals: {tensor * tensor}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7uSNeyKyb7c9","executionInfo":{"status":"ok","timestamp":1719718201064,"user_tz":-180,"elapsed":35,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"fb0a470e-2fe4-48ce-8578-cc8f6516646c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1, 2, 3]) * tensor([1, 2, 3])\n","Equals: tensor([1, 4, 9])\n"]}]},{"cell_type":"code","source":["#Matrix Multiplication.\n","torch.matmul(tensor,tensor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6tVRxHi4gTrN","executionInfo":{"status":"ok","timestamp":1719718201065,"user_tz":-180,"elapsed":33,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"e2bfd398-806d-49a2-c547-f07c66d28b08"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(14)"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["%%time\n","value = 0\n","for i in range (len(tensor)):\n","  value += tensor[i] * tensor[i]\n","print(value)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SZchy1Buggtb","executionInfo":{"status":"ok","timestamp":1719718201066,"user_tz":-180,"elapsed":30,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"08a01af7-26a4-4c6f-fd70-a9791e10afe7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor(14)\n","CPU times: user 2.02 ms, sys: 1 µs, total: 2.03 ms\n","Wall time: 2.03 ms\n"]}]},{"cell_type":"code","source":["%%time\n","torch.matmul(tensor,tensor)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"786I1Io0hoNv","executionInfo":{"status":"ok","timestamp":1719718201066,"user_tz":-180,"elapsed":24,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"48164b07-572e-48c5-b886-2c9c77ef99a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["CPU times: user 59 µs, sys: 10 µs, total: 69 µs\n","Wall time: 72.7 µs\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor(14)"]},"metadata":{},"execution_count":33}]},{"cell_type":"markdown","source":["### One of the most common errors in deep learning is shape errors,"],"metadata":{"id":"fU7GnklTifET"}},{"cell_type":"code","source":["#Shapes for matrix multiplication\n","tensor_A = torch.tensor([[1,2],\n","                         [3,4],\n","                         [5,6]])\n","tensor_B = torch.tensor([[7,10],\n","                         [8,11],\n","                         [9,12]])\n","torch.mm(tensor_A,tensor_B)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":176},"id":"mhE97hWrimo9","executionInfo":{"status":"error","timestamp":1719718201067,"user_tz":-180,"elapsed":22,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"744399f9-eab1-4228-9655-3b45cdc7bbbd"},"execution_count":null,"outputs":[{"output_type":"error","ename":"RuntimeError","evalue":"mat1 and mat2 shapes cannot be multiplied (3x2 and 3x2)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-34-69b8f1b54083>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m                          \u001b[0;34m[\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m11\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m                          [9,12]])\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensor_A\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtensor_B\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m: mat1 and mat2 shapes cannot be multiplied (3x2 and 3x2)"]}]},{"cell_type":"markdown","source":["To fix our tensor shape issues we can manipulate the shape of one of our tensors using a `Transpose`"],"metadata":{"id":"o9uVU0g3-Yop"}},{"cell_type":"code","source":["tensor_B.T.shape"],"metadata":{"id":"JXT_nM1Q9YQS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.mm(tensor_A,tensor_B.T)"],"metadata":{"id":"hPY6V4zw-R7a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#The Matrix Multiplication works when tensor_B is transposed.\n","print(f\"Original shapes: tensor_A = {tensor_A.shape},tensor_B = {tensor_B.shape}\")\n","print(f\"New shapes: tensor_A = {tensor_A.shape} (same shape as above),tensor_B.T (The Transpose of tensor_B) = {tensor_B.T.shape}\")\n","print(f\"Multiplying: {tensor_A.shape} @ {tensor_B.T.shape} <- inner dimensions must match\")\n","\n","torch.matmul(tensor_A,tensor_B.T).shape"],"metadata":{"id":"lyupo12yAOb9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Finding,Min,Max,Mean,Sum etc. (Tensor Aggregation.)\n","\n","> Add blockquote\n","\n"],"metadata":{"id":"x5Fu89VbIZye"}},{"cell_type":"code","source":["#Create a tensor\n","x = torch.arange(0,100,10)\n","x"],"metadata":{"id":"aRZTu3CQAoR4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Find the min\n","torch.min(x),x.min()"],"metadata":{"id":"W4y458fUJYQx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Find the max\n","torch.max(x),x.max()"],"metadata":{"id":"G4qUUCTZJcwU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Find the mean\n","torch.mean(x.type(torch.float32)),x.type(torch.float32).mean()"],"metadata":{"id":"BmYwJz9lK0AF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Find the sum.\n","torch.sum(x),x.sum()"],"metadata":{"id":"gOkLRnZsMKrg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Finding the positional min and max\n"],"metadata":{"id":"z9eItpDHGDwQ"}},{"cell_type":"code","source":["#Find the position in the tensor with minimum value with argmin -> returns index position of target tensor where the minimum value occurs\n","x.argmin()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":176},"id":"5rTeQ-u4E9lX","executionInfo":{"status":"error","timestamp":1719718201973,"user_tz":-180,"elapsed":87,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"a201fd4f-1b79-4b57-e9df-8857a5392237"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'x' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-ee5ba4c30326>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Find the position in the tensor with minimum value with argmin -> returns index position of target tensor where the minimum value occurs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"]}]},{"cell_type":"code","source":["x[1]"],"metadata":{"id":"OSHMLu5QIqXl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Find the position in the tensor with maximum value with argmax -> returns index position of target tensor where the maximum value occurs\n","x.argmax()\n"],"metadata":{"id":"rvzMB4rnIxwR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x[9]"],"metadata":{"id":"H3HI-1cuLNfg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Reshaping,Stacking,Squeezing and Unsqueezing Sensors.\n","* Reshaping - reshapes and input tensor to a defined shape.\n","* View - Return a view of an input tensor of a certain shape but keep the same memory as the original tensor.\n","* Stacking - Combine multiple tensors  ontop of each other (v-stack) or side-by-side (h-stack).\n","* Squeeze - removes all '1' dimensions from a tensor.\n","\n","* Permute- Return a view of the input with dimensions permuted (swapped) in a certain way."],"metadata":{"id":"2jkTuRhcL0Kt"}},{"cell_type":"code","source":["#Let's create a tensor.\n","import torch\n","x = torch.arange(1.,10.)\n","x,x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FueX9nQyLyKi","executionInfo":{"status":"ok","timestamp":1719718201994,"user_tz":-180,"elapsed":98,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"76d42c11-e8ea-441b-e63a-5c359e376317"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.]), torch.Size([9]))"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["\n","#Add an Extra Dimension.\n","x_reshaped = x.reshape(1,9)\n","x_reshaped,x_reshaped.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nd5xVJmnT0wz","executionInfo":{"status":"ok","timestamp":1719718202747,"user_tz":-180,"elapsed":22,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"40ad3af5-6854-453d-933f-1e3b5ebd81ef"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]]), torch.Size([1, 9]))"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["#Change the view\n","z = x.view(1,9)\n","z,z.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_gjU8fBaUrTb","executionInfo":{"status":"ok","timestamp":1719718202748,"user_tz":-180,"elapsed":21,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"cf9fefa4-05de-4e8f-dc90-24cbb0b415c9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]]), torch.Size([1, 9]))"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["\n","#Stack Tensors on top of each other.\n","x_stacked = torch.stack([x,x,x,x],dim=0)\n","x_stacked"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J-28P6C_WHuj","executionInfo":{"status":"ok","timestamp":1719718202748,"user_tz":-180,"elapsed":15,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"27ecf442-a0a5-4ddc-df82-e795d3c1da22"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.],\n","        [1., 2., 3., 4., 5., 6., 7., 8., 9.],\n","        [1., 2., 3., 4., 5., 6., 7., 8., 9.],\n","        [1., 2., 3., 4., 5., 6., 7., 8., 9.]])"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["#torch.squeeze -> Returns a tensor with all specified dimensions of input of size 1 removed.\n","x = torch.zeros(2,1,2,1,2)\n","x.size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WZ3ojEDtW7dg","executionInfo":{"status":"ok","timestamp":1719718207492,"user_tz":-180,"elapsed":17,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"bd042168-6ee4-43d6-ddb5-6c0446f77277"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 1, 2, 1, 2])"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["y = torch.squeeze(x)\n","y.size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4E9bgmvxYZ9e","executionInfo":{"status":"ok","timestamp":1719718207492,"user_tz":-180,"elapsed":14,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"b1d1d8fa-3bee-465c-9da2-a158d418b8a9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 2, 2])"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["y = torch.squeeze(x,0)\n","y.size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iV88pIOSYhYG","executionInfo":{"status":"ok","timestamp":1719718207492,"user_tz":-180,"elapsed":10,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"f298c5c3-94f1-41db-d4d2-7b026eba0765"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 1, 2, 1, 2])"]},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["y = torch.squeeze(x,1)\n","y.size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dczgP4CbZSyq","executionInfo":{"status":"ok","timestamp":1719718207492,"user_tz":-180,"elapsed":6,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"cefdb6a7-1500-43d9-f6f4-1d3968724f74"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 2, 1, 2])"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["y = torch.squeeze(x,(1,2,3))\n","y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BwG2GPQ2ZciJ","executionInfo":{"status":"ok","timestamp":1719718210140,"user_tz":-180,"elapsed":145,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"366bd98e-a48c-4abe-d911-ee6475546887"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[[0., 0.],\n","         [0., 0.]],\n","\n","        [[0., 0.],\n","         [0., 0.]]])"]},"metadata":{},"execution_count":44}]},{"cell_type":"code","source":["x_reshaped.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lgzNC1RsZkxE","executionInfo":{"status":"ok","timestamp":1719718210140,"user_tz":-180,"elapsed":143,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"91f66573-dd68-40d4-d048-67684454dfa2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([1, 9])"]},"metadata":{},"execution_count":45}]},{"cell_type":"code","source":["x_squeeze = x_reshaped.squeeze()"],"metadata":{"id":"RXhp6mAG568S"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Torch unsqueeze -> adds a single dimension to a target tensor at a specific dimension\n","print(f\"Previous target: {x_squeeze}\")\n","print(f\"Previous shape: {x_squeeze.shape}\")\n","\n","#Add an extra dimension with unsqueeze.\n","x_unsqueeze = x_squeeze.unsqueeze(dim=0)\n","print(f\"\\nNew Tensor: {x_unsqueeze}\")\n","print(f\"New shape: {x_unsqueeze.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"suJI4Oc2uC1K","executionInfo":{"status":"ok","timestamp":1719718210142,"user_tz":-180,"elapsed":130,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"078307e3-872f-405d-d86c-e1ac06062731"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Previous target: tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.])\n","Previous shape: torch.Size([9])\n","\n","New Tensor: tensor([[1., 2., 3., 4., 5., 6., 7., 8., 9.]])\n","New shape: torch.Size([1, 9])\n"]}]},{"cell_type":"code","source":["#torch.permute -> rearranges the dimensions of atarget tensors in a specified order.\n","x = torch.randn(2,7,9,4,5,1,9)\n","x.size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8khOmnTVwfuc","executionInfo":{"status":"ok","timestamp":1719718210142,"user_tz":-180,"elapsed":126,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"945fa21c-9c19-429b-bf73-59f265c20586"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([2, 7, 9, 4, 5, 1, 9])"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["torch.permute(x,(6,4,0,1,2,3,5)).size()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P0SVAjay3hS3","executionInfo":{"status":"ok","timestamp":1719718210142,"user_tz":-180,"elapsed":121,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"d04af067-b1dd-452c-cb1d-f4157ae05817"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([9, 5, 2, 7, 9, 4, 1])"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["x_original = torch.rand(size=(224,224,3)) # [Height,Width,Color_channels].\n","\n","#Permute the original tensor to rearrange the axis or (dim)order.\n","x_permuted = x_original.permute(2,0,1)\n","print(f\"Previous shape: {x_original.shape}\")\n","print(f\"New shape: {x_permuted.shape}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T9r_9G0E4tUw","executionInfo":{"status":"ok","timestamp":1719718210143,"user_tz":-180,"elapsed":117,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"b9544fcb-3e43-4162-c9c7-d010ce2c4544"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Previous shape: torch.Size([224, 224, 3])\n","New shape: torch.Size([3, 224, 224])\n"]}]},{"cell_type":"code","source":["x_original[0,0,0] = 7000\n","x_original[0,0,0],x_permuted[0,0,0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TG6aReD7NQw8","executionInfo":{"status":"ok","timestamp":1719718210143,"user_tz":-180,"elapsed":113,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"3d82c7f7-6e8c-43d0-c41c-3ff9e2bb539a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor(7000.), tensor(7000.))"]},"metadata":{},"execution_count":51}]},{"cell_type":"markdown","source":["##Indexing (Selecting data from tensors).\n","Indexing with Pytorch is similar to indexing with Numpy."],"metadata":{"id":"9jdZ5YOpQDua"}},{"cell_type":"code","source":["#Create a tensor.\n","import torch\n","x =  torch.arange(1,10).reshape(1,3,3)\n","x,x.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"divNkIzMPEJv","executionInfo":{"status":"ok","timestamp":1719718210144,"user_tz":-180,"elapsed":112,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"f7ecb2ca-3b1e-4194-8343-c54a5a9382ae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[[1, 2, 3],\n","          [4, 5, 6],\n","          [7, 8, 9]]]),\n"," torch.Size([1, 3, 3]))"]},"metadata":{},"execution_count":52}]},{"cell_type":"code","source":["#Lets index on our new tensor.\n","x[0][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FYGUlfRrQaG7","executionInfo":{"status":"ok","timestamp":1719718210145,"user_tz":-180,"elapsed":110,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"48fc13cb-43fe-4bb7-e34e-4914d6f00384"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1, 2, 3])"]},"metadata":{},"execution_count":53}]},{"cell_type":"code","source":["#Lets index on our most inner bracket\n","x[0][0][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wa7LcjaLRbhy","executionInfo":{"status":"ok","timestamp":1719718210145,"user_tz":-180,"elapsed":108,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"7b7fcb99-8e27-46e4-934a-428316db393a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(1)"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["#You  can also use \":\" to select \"all\" of a target dimension.\n","x[:,1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JluB5Oc8SJkp","executionInfo":{"status":"ok","timestamp":1719718210146,"user_tz":-180,"elapsed":106,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"61894cf9-067c-416e-e417-62bfdcf2d7d3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[4, 5, 6]])"]},"metadata":{},"execution_count":55}]},{"cell_type":"code","source":["#Get all values of the 0 dimension but ony 1 index value of 1st and 2nd dimension.\n","x[:,1,1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zym8p1KdYXM-","executionInfo":{"status":"ok","timestamp":1719718210147,"user_tz":-180,"elapsed":105,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"862f009f-97e2-4400-f3fc-2b3118497785"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([5])"]},"metadata":{},"execution_count":56}]},{"cell_type":"code","source":["#Get index 0 of 0th and 1st dimension and all values of the 2nd dimension.\n","x[0,2,:]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4ItnCpmpbdsD","executionInfo":{"status":"ok","timestamp":1719718210147,"user_tz":-180,"elapsed":102,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"8c3c3622-1c4e-462a-edda-a2a6b6b4bb4e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([7, 8, 9])"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["#Index on \"x\" to return 9\n","x[0][2][2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H76AIYB3cBtB","executionInfo":{"status":"ok","timestamp":1719718210148,"user_tz":-180,"elapsed":101,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"841d5193-2013-409b-e42b-9d1d0206b3ff"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(9)"]},"metadata":{},"execution_count":58}]},{"cell_type":"code","source":["#index on \"x\" to return 3,6 & 9.\n","print(x[0,:,2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rEYG9HRggj6c","executionInfo":{"status":"ok","timestamp":1719718210148,"user_tz":-180,"elapsed":98,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"2c201ce4-8c1d-49bd-b039-f3d5767bace2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([3, 6, 9])\n"]}]},{"cell_type":"markdown","source":["##PyTorch tensors & Numpy.\n","NUmpy is a popular scientific python numerical computing library.\n","And because of this,PyTorch has functionalities to interact with.\n","* Data in Numpy, want in PyTorch tensor -> `torch.from_numpy(ndarray)`\n","* PyTorch tensor -> NUmpy -> `torch.Tensor.numpy()`"],"metadata":{"id":"fb1gH8RDlPZ8"}},{"cell_type":"code","source":["#Numpy array to tensor\n","import torch\n","import numpy as np\n","\n","array = np.arange(1.0,8.0)\n","tensor = torch.from_numpy(array)\n","array,tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H2akj6LSg6yM","executionInfo":{"status":"ok","timestamp":1719718210149,"user_tz":-180,"elapsed":97,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"bcd77649-c530-45e6-f799-904d7b06b018"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([1., 2., 3., 4., 5., 6., 7.]),\n"," tensor([1., 2., 3., 4., 5., 6., 7.], dtype=torch.float64))"]},"metadata":{},"execution_count":60}]},{"cell_type":"code","source":["#Change the value of the Array...\n","array = array + 1\n","array,tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSmhuWa9o0t3","executionInfo":{"status":"ok","timestamp":1719718210149,"user_tz":-180,"elapsed":66,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"ef3e16a9-c114-49fd-aafe-05d9613650d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([2., 3., 4., 5., 6., 7., 8.]),\n"," tensor([1., 2., 3., 4., 5., 6., 7.], dtype=torch.float64))"]},"metadata":{},"execution_count":61}]},{"cell_type":"code","source":["#Tensor to numpy array.\n","tensor = torch.ones(7)\n","numpy_tensor =  tensor.numpy()\n","tensor,numpy_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dnzl_srPFYNr","executionInfo":{"status":"ok","timestamp":1719718210150,"user_tz":-180,"elapsed":63,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"72f6c483-036c-446c-aa63-134005a6114b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([1., 1., 1., 1., 1., 1., 1.]),\n"," array([1., 1., 1., 1., 1., 1., 1.], dtype=float32))"]},"metadata":{},"execution_count":62}]},{"cell_type":"code","source":["#Change the tensor,what happens to `numpy_tensor`\n","tensor = tensor + 1\n","tensor,numpy_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RzuNTWe4Gha6","executionInfo":{"status":"ok","timestamp":1719718210150,"user_tz":-180,"elapsed":60,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"e475fb06-a1c1-4ba5-e7d2-52264d9c8e27"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([2., 2., 2., 2., 2., 2., 2.]),\n"," array([1., 1., 1., 1., 1., 1., 1.], dtype=float32))"]},"metadata":{},"execution_count":63}]},{"cell_type":"markdown","source":["##Reproducibility\n","In short, this is how a neural network learns:\n","\n","\n","`start with a random number -> tensor operations -> update random numbers to try and make them better representations of the data -> again -> again -> again ...`\n","\n","\n","To reduce the randomness in a neural networks and PyTorch comes the concept of a `Random seed`\n","\n","Essentially,what a Random seed does is flavor the randomness."],"metadata":{"id":"i6rkVDF-IG1N"}},{"cell_type":"code","source":["import torch\n","#Create 2 random tensors\n","random_tensor_A = torch.rand(3,4)\n","random_tensor_B = torch.rand(3,4)\n","print(random_tensor_A)\n","print('\\n')\n","print(random_tensor_B)\n","print('\\n')\n","print(random_tensor_A == random_tensor_B)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LnoOgEJhHFda","executionInfo":{"status":"ok","timestamp":1719718210151,"user_tz":-180,"elapsed":57,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"a2d58779-3a3e-45d0-9863-d894aa73bc07"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.3350, 0.5948, 0.3750, 0.8205],\n","        [0.5694, 0.7017, 0.1451, 0.4270],\n","        [0.0754, 0.6777, 0.4726, 0.8686]])\n","\n","\n","tensor([[0.9651, 0.3676, 0.8190, 0.5939],\n","        [0.9532, 0.3740, 0.3235, 0.6405],\n","        [0.7079, 0.8265, 0.1390, 0.8573]])\n","\n","\n","tensor([[False, False, False, False],\n","        [False, False, False, False],\n","        [False, False, False, False]])\n"]}]},{"cell_type":"code","source":["#Lets make some random but reproducible tensors...\n","import torch\n","\n","#Set the random seed.\n","RANDOM_SEED = 42\n","torch.manual_seed(RANDOM_SEED)\n","random_tensor_C = torch.rand(3,4)\n","torch.manual_seed(RANDOM_SEED)\n","random_tensor_D = torch.rand(3,4)\n","\n","print(random_tensor_C)\n","print(\"\\n\")\n","print(random_tensor_D)\n","print(\"\\n\")\n","print(random_tensor_C == random_tensor_D)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2C5IOeebJq2K","executionInfo":{"status":"ok","timestamp":1719718210151,"user_tz":-180,"elapsed":53,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"0dadaece-2c7f-490b-b4b5-fbc19df3f2ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n","        [0.3904, 0.6009, 0.2566, 0.7936],\n","        [0.9408, 0.1332, 0.9346, 0.5936]])\n","\n","\n","tensor([[0.8823, 0.9150, 0.3829, 0.9593],\n","        [0.3904, 0.6009, 0.2566, 0.7936],\n","        [0.9408, 0.1332, 0.9346, 0.5936]])\n","\n","\n","tensor([[True, True, True, True],\n","        [True, True, True, True],\n","        [True, True, True, True]])\n"]}]},{"cell_type":"markdown","source":["\n","\n","##Running tensors and PyTorch on the GPUs(and making faster computations).\n","\n","\n","\n","\n","\n"],"metadata":{"id":"ZOb3y7VvZwJE"}},{"cell_type":"code","source":["#Check 4 GPU access with PyTorch.\n","import torch\n","torch.cuda.is_available"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":121},"id":"VY45XASHRnFA","executionInfo":{"status":"ok","timestamp":1719718210151,"user_tz":-180,"elapsed":50,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"85c71677-af21-4b1f-dcdd-3e76f83731a8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<function torch.cuda.is_available() -> bool>"],"text/html":["<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n","      pre.function-repr-contents {\n","        overflow-x: auto;\n","        padding: 8px 12px;\n","        max-height: 500px;\n","      }\n","\n","      pre.function-repr-contents.function-repr-contents-collapsed {\n","        cursor: pointer;\n","        max-height: 100px;\n","      }\n","    </style>\n","    <pre style=\"white-space: initial; background:\n","         var(--colab-secondary-surface-color); padding: 8px 12px;\n","         border-bottom: 1px solid var(--colab-border-color);\"><b>torch.cuda.is_available</b><br/>def is_available() -&gt; bool</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.10/dist-packages/torch/cuda/__init__.py</a>Return a bool indicating if CUDA is currently available.</pre>\n","      <script>\n","      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n","        for (const element of document.querySelectorAll('.filepath')) {\n","          element.style.display = 'block'\n","          element.onclick = (event) => {\n","            event.preventDefault();\n","            event.stopPropagation();\n","            google.colab.files.view(element.textContent, 105);\n","          };\n","        }\n","      }\n","      for (const element of document.querySelectorAll('.function-repr-contents')) {\n","        element.onclick = (event) => {\n","          event.preventDefault();\n","          event.stopPropagation();\n","          element.classList.toggle('function-repr-contents-collapsed');\n","        };\n","      }\n","      </script>\n","      </div>"]},"metadata":{},"execution_count":66}]},{"cell_type":"code","source":["#setup device agnostic.\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","device"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"IB4wbJ_fYOx3","executionInfo":{"status":"ok","timestamp":1719718210152,"user_tz":-180,"elapsed":49,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"296f481b-5549-4e79-9f70-36f9b810d0e0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'cuda'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":67}]},{"cell_type":"markdown","source":["For `PyTorch` since its capable of running compute on thr `GPU` or `CPU`,its best to practice how to setup device agnostic code: https://alband.github.io/doc_view/notes/cuda.html"],"metadata":{"id":"5Ro6RVoVdJI3"}},{"cell_type":"code","source":["torch.cuda.device_count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FVvgs-ZZcqOJ","executionInfo":{"status":"ok","timestamp":1719718210152,"user_tz":-180,"elapsed":47,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"9cf1c47d-e032-4250-e9bf-16ed611bbdcf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":68}]},{"cell_type":"markdown","source":["##Putting tensors and models on the GPU.\n","The reason we want our tensors/models on the GPU is because using a GPU results in faster computations."],"metadata":{"id":"eNOHm3Bwe3Ha"}},{"cell_type":"code","source":["#Create a tensor\n","tensor = torch.tensor([1,2,3])\n","\n","#Tensor not on GPU.\n","print(tensor,tensor.device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pos-IDTDerbx","executionInfo":{"status":"ok","timestamp":1719718210736,"user_tz":-180,"elapsed":19,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"3413c3df-d997-4d62-fad7-104ec4114f0f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1, 2, 3]) cpu\n"]}]},{"cell_type":"code","source":["#Move tensor to GPU (if available)\n","tensor_on_gpu = tensor.to(device)\n","tensor_on_gpu"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K1z7LqtNfepT","executionInfo":{"status":"ok","timestamp":1719718210737,"user_tz":-180,"elapsed":12,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"86b32e66-6142-40ae-cce3-a405e66dedc4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1, 2, 3], device='cuda:0')"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["#if a tensor is on the GPU it cant be transformed to Numpy.\n","tensor_on_cpu = tensor_on_gpu.cpu().numpy()\n","tensor_on_cpu"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tN7Yc6LLglDI","executionInfo":{"status":"ok","timestamp":1719718210738,"user_tz":-180,"elapsed":9,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"f7b9cd1b-110b-411e-9845-0f8cc82003f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1, 2, 3])"]},"metadata":{},"execution_count":71}]},{"cell_type":"markdown","source":["##EXERCISE"],"metadata":{"id":"kYaIZLAyNC1Y"}},{"cell_type":"code","source":["#1.Documentation Reading...\n"],"metadata":{"id":"rMJIt5dwhDfJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["2.#Create a random tensor with shape(7,7).\n","import torch\n","random_tensor = torch.rand(7,7)\n","random_tensor,random_tensor.shape,random_tensor.dtype"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cg7BdntaOSsm","executionInfo":{"status":"ok","timestamp":1719719538122,"user_tz":-180,"elapsed":529,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"05f409b4-2c90-4346-8eba-df60c5c0163e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.6985, 0.9746, 0.6315, 0.8352, 0.9929, 0.4234, 0.6038],\n","         [0.1525, 0.3970, 0.8703, 0.7563, 0.1836, 0.0991, 0.1583],\n","         [0.0066, 0.1142, 0.3764, 0.8374, 0.5837, 0.1197, 0.0989],\n","         [0.7487, 0.1281, 0.4384, 0.7399, 0.2686, 0.4455, 0.4565],\n","         [0.3817, 0.2465, 0.0543, 0.0958, 0.2323, 0.9829, 0.2585],\n","         [0.1642, 0.6212, 0.6378, 0.7740, 0.8801, 0.7784, 0.0042],\n","         [0.5443, 0.8029, 0.4538, 0.2054, 0.9767, 0.3130, 0.2153]]),\n"," torch.Size([7, 7]),\n"," torch.float32)"]},"metadata":{},"execution_count":92}]},{"cell_type":"code","source":["#3. Perform a matrix multiplication on the tensor from 2 with another random tensor with shape (1, 7) (hint: you may have to transpose the second tensor).\n","random_tensor_B = torch.rand(1,7)\n","solution = torch.matmul(random_tensor,random_tensor_B.T)\n","solution,random_tensor.shape,random_tensor_B.shape,solution.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-tKR_3DdOkAf","executionInfo":{"status":"ok","timestamp":1719719586855,"user_tz":-180,"elapsed":508,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"2d66d663-2b8a-4721-c62c-dfe432fbbe79"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[3.0824],\n","         [1.4998],\n","         [1.0430],\n","         [1.5756],\n","         [0.9856],\n","         [2.0434],\n","         [2.3737]]),\n"," torch.Size([7, 7]),\n"," torch.Size([1, 7]),\n"," torch.Size([7, 1]))"]},"metadata":{},"execution_count":95}]},{"cell_type":"code","source":["#4. Set the random seed to 0 and do 2 & 3 over again.\n","RANDOM_SEED = 0\n","torch.manual_seed(RANDOM_SEED)\n","random_tensor_A = torch.rand(7,7)\n","torch.manual_seed(RANDOM_SEED)\n","random_tensor_B = torch.rand(1,7)\n","\n","multiplication = torch.mm(random_tensor_A,random_tensor_B.T)\n","multiplication,multiplication.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MbeqlktoPIOI","executionInfo":{"status":"ok","timestamp":1719719895697,"user_tz":-180,"elapsed":4,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"3c20f0b3-5b56-4290-b4c9-fefd75fe9ecd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[1.5985],\n","         [1.1173],\n","         [1.2741],\n","         [1.6838],\n","         [0.8279],\n","         [1.0347],\n","         [1.2498]]),\n"," torch.Size([7, 1]))"]},"metadata":{},"execution_count":102}]},{"cell_type":"code","source":["#5. Speaking of random seeds, we saw how to set it with torch.manual_seed() but is there a GPU equivalent? (hint: you'll need to look into the documentation for torch.cuda for this one)\n","RANDOM_SEED = 1234\n","torch.cuda.manual_seed(RANDOM_SEED)\n","torch.cuda.device_count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iTgT_x9AShPt","executionInfo":{"status":"ok","timestamp":1719720985911,"user_tz":-180,"elapsed":624,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"3166fb69-c375-49d4-be14-a3641f42440a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{},"execution_count":110}]},{"cell_type":"code","source":["#6.Create two random tensors of shape (2, 3) and send them both to the GPU (you'll need access to a GPU for this). Set torch.manual_seed(1234) when creating the tensors (this doesn't have to be the GPU random seed). The output should be something like:\n","\n","torch.manual_seed(1234)\n","tensor_A = torch.rand(2,3)\n","torch.manual_seed(1234)\n","tensor_B = torch.rand(2,3)\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","tensor_on_gpu_A = tensor_A.to(device)\n","tensor_on_gpu_B = tensor_B.to(device)\n","tensor_on_gpu_A,tensor_on_gpu_B"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ha7hZLeyVXna","executionInfo":{"status":"ok","timestamp":1719721554590,"user_tz":-180,"elapsed":854,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"cafeb31c-4f81-43ab-a189-547ebc934283"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.0290, 0.4019, 0.2598],\n","         [0.3666, 0.0583, 0.7006]], device='cuda:0'),\n"," tensor([[0.0290, 0.4019, 0.2598],\n","         [0.3666, 0.0583, 0.7006]], device='cuda:0'))"]},"metadata":{},"execution_count":119}]},{"cell_type":"code","source":["#7. Perform a matrix multiplication on the tensors you created in 6 (again, you may have to adjust the shapes of one of the tensors).\n","tensor_A.shape,tensor_B.shape\n","multiple = torch.matmul(tensor_A,tensor_B.T)\n","multiple,multiple.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_WYICHDAX8kt","executionInfo":{"status":"ok","timestamp":1719722394054,"user_tz":-180,"elapsed":688,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"ac577cf0-7e68-4c80-d697-48327716e27f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor([[0.2299, 0.2161],\n","         [0.2161, 0.6287]]),\n"," torch.Size([2, 2]))"]},"metadata":{},"execution_count":123}]},{"cell_type":"code","source":["#8. Find the maximum and minimum values of the output of 7.\n","minimum = torch.min(multiple)\n","maximum = torch.max(multiple)\n","minimum,maximum"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ivhckqqcbhx9","executionInfo":{"status":"ok","timestamp":1719722571269,"user_tz":-180,"elapsed":567,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"a3f28139-ebe4-4705-defb-9ef4762d7b69"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor(0.2161), tensor(0.6287))"]},"metadata":{},"execution_count":127}]},{"cell_type":"code","source":["multiple.argmin(),multiple.argmax()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8nSm1Ye7ccJ0","executionInfo":{"status":"ok","timestamp":1719722682279,"user_tz":-180,"elapsed":513,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"38e9ba6f-fad7-42f6-a769-a78ca427fedd"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(tensor(1), tensor(3))"]},"metadata":{},"execution_count":129}]},{"cell_type":"code","source":["RANDOM_SEED = 7\n","torch.manual_seed(RANDOM_SEED)\n","random_tensor = torch.rand(1,1,1,10)\n","new_tensor = torch.squeeze(random_tensor)\n","print(random_tensor)\n","print(random_tensor.shape)\n","print(\"\\n\")\n","print(new_tensor)\n","print(new_tensor.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PaHVlQMJdXmP","executionInfo":{"status":"ok","timestamp":1719723125632,"user_tz":-180,"elapsed":13,"user":{"displayName":"Mwavula Lenjo","userId":"06041410993654245534"}},"outputId":"81099953-d801-4c73-f247-ea095648ba38"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[[0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297,\n","           0.3653, 0.8513]]]])\n","torch.Size([1, 1, 1, 10])\n","\n","\n","tensor([0.5349, 0.1988, 0.6592, 0.6569, 0.2328, 0.4251, 0.2071, 0.6297, 0.3653,\n","        0.8513])\n","torch.Size([10])\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"hbBvsxhadnc2"},"execution_count":null,"outputs":[]}]}